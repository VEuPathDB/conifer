#!/usr/bin/env python

# This script will migrate a project_home with old project names
# by switching subversion repositories and renaming directories.
#
# See https://redmine.apidb.org/issues/25426

import argparse
import os
import subprocess
import sys

def main():
  # Map of old project to new project
  projects = {
    'ApiCommonShared': 'ApiCommonModel',
    'EuPathDatasets': 'ApiCommonDatasets',
    'EuPathMetadataRepository': 'ApiCommonMetadataRepository',
    'EuPathPresenters': 'ApiCommonPresenters',
    'EuPathSiteCommon': 'EbrcWebsiteCommon',
    'EuPathWebSvcCommon': 'EbrcWebSvcCommon',
    'MicrobiomeDBDatasets': 'MicrobiomeDatasets',
    'MicrobiomeDBPresenters': 'MicrobiomePresenters',
    'MicrobiomeDBWebsite': 'MicrobiomeWebsite',
    'OrthoMCLShared': 'OrthoMCLModel',
  }

  # Map of new project to added dependencies
  dependencies = {
    'ApiCommonModel': 'EbrcModelCommon'
  }

  parser = argparse.ArgumentParser(description='Migrate old subversion ' +
                                   'project names in current directory ' +
                                   'to new project names.')
  parser.add_argument('--dry-run', '-n', dest='test_run', action='store_true',
                      default=False, help='take no action and print commands')
  args = parser.parse_args()

  if args.test_run:
    sys.stderr.write('Dry run ... only printing what will be done\n\n')

  for old, new in projects.iteritems():
    if not os.path.isdir(os.path.join(os.getcwd(), old)):
      sys.stderr.write('... skipping {0} ... not present ... \n'.format(old))
      continue

    try_or_log(lambda: switch(old, new).execute(args.test_run))
    try_or_log(lambda: rename(old, new).execute(args.test_run))
    try_or_log(lambda: checkout_deps(new, dependencies).execute(args.test_run))


def try_or_log(fn):
  try:
    fn()
  except Exception, e:
    sys.stderr.write('Error: {0}.\n'.format(e))


def switch(old, new):
  url = get_url(old, new)
  return Command([ 'svn', 'sw', url, old ])


def checkout_deps(new, dependencies):
  if new in dependencies:
    dep = dependencies[new]
    url = get_url(new, dep)
    return Command([ 'svn', 'co', url, dep ])
  else:
    return Command()


def rename(old, new):
  return Command([ 'mv', old, new ])


def get_url(old, new):
  lines = subprocess.check_output(['svn', 'info', old]).splitlines()
  return next(line for line in lines if
              line.startswith('URL:')).replace('URL: ', '').replace(old, new)


class Command:
  def __init__(self, command_list=None):
    self._cl = command_list

  def execute(self, print_only):
    if self._cl == None:
      return
    if print_only:
      print ' '.join(self._cl)
    else:
      subprocess.check_call(self._cl)

main()
