#!/usr/bin/perl

use lib "$ENV{GUS_HOME}/lib/perl";
use FgpUtil::Util::ProjectBrancher;
use strict;

sub main {
    # parse args, get projects, and print usage if anything incorrect
    my ($group, $branch) = @ARGV;
    usage() unless ($group && $branch);
    my @projects = getProjectGroup($group);
    usage() if (@projects == undef);

    # perform the check out
    checkout($branch, @projects);
}

sub usage {
    my $prog = getCmd();
    my $groupOptions = getProjectGroupOptions();
    print STDERR "
Checks out the projects in the passed project group into the current directory.  Caller can select trunk or a branch.  cd to target \$PROJECT_HOME before running.

usage: $prog $groupOptions (trunk|<branch_name>)

Checks out the following projects based on group name:

";
    printProjectGroupInfo();
    exit(1);
}

sub checkout {
    my ($branch, @projects) = @_;
    my $url = getRepoBaseUrl();

    # debug
    #print STDERR "checkout() called with branch=$branch and projects=\n" . join(',', @projects) . "\n";

    foreach my $project (@projects) {
        my ($name, $repository) = split(/:/, $project);
        my $subTarget = $branch eq 'trunk'? "trunk" : "branches/$branch";
        my $target = "$url/$repository/$name/$subTarget";
        my $dirName = $name;
        $dirName = "GUS" if $dirName eq 'GusAppFramework';
        my $cmd = "svn co $target $dirName";
        print STDERR "$name ($target)\n";
        if ( -e $dirName ) {
            print STDERR "Directory $dirName already exists.  Skipping checkout...\n";
        }
        else {
            system($cmd) == 0 || print STDERR "Failed checking out '$name'\n";
        }
    }
}

main();

1;