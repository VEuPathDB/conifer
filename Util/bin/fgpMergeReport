#!/usr/bin/perl

use strict;

my ($operation, $projectHomeDir, $branch) = @ARGV;

usage() unless $operation && $projectHomeDir && $branch;
usage() unless $operation =~ /^(-list|-test|-merge|-commit)$/;

die "Error: $projectHomeDir must be a full path\n" unless $projectHomeDir =~ /^\//;

chdir($projectHomeDir) || die "Can't chdir to '$projectHomeDir'\n";

my @dirs = map {chomp; $_} `ls`;

my @needIt;
foreach my $dir (@dirs) {
  print STDERR ".";
  my $svnName = $dir;
  $svnName = "GusAppFramework" if $dir eq "GUS";

  chdir("$projectHomeDir/$dir") || die "Error: Can't chdir into '$projectHomeDir/$dir'\n";
  my $target = $branch eq 'trunk'? "trunk" : "branches/$branch";
  my $cmd = "svn mergeinfo ^/$svnName/$target --show-revs eligible";
  my @revisions = `$cmd 2> /dev/null`;
  if ($?) {
    warn "\nError running [$cmd]\n";
  }
  # when reintegrating, the branch will have always have a "branch" revision, so ignore that one
  push(@needIt, $dir) if ($target ne 'trunk' && scalar(@revisions) > 1) || ($target eq 'trunk' && scalar(@revisions) > 0)
}
print STDERR "\n";
print STDERR "No projects need to be merged\n" unless scalar(@needIt);

foreach my $dir (@needIt) {
  print $dir."\n";
  if ($operation ne "-list") {
    my $svnName = $dir eq "GUS" ? "GusAppFramework" : $dir;
    my $target = $branch eq "trunk" ? "trunk" : "branches/$branch";    
    my $dryrun = $operation eq "-test" ? "--dry-run" : "";
    my $reintegrate = $target eq "trunk" ? "" : "--reintegrate"; # assume reintegrate if target is a branch
    chdir("$projectHomeDir/$dir") || die "Error: Can't chdir into '$projectHomeDir/$dir'\n";
    system("svn merge $reintegrate $dryrun ^/$svnName/$target");
    if ($operation eq "-commit") {
      system("svn commit -m \"merge from $target\"");
    }
  }
}

sub usage {
  print STDERR "
Get a report on which projects in a \$PROJECT_HOME need to be merged into SVN, do a
  merge dry run, or do an actual merge, optionally committing changes.

Usage: fgpMergeReport (-list|-test|-merge|-commit) <project_home_dir> (trunk|<my_branch_name>)

Where:
  (-list|-test|-merge|-commit) : operation to be performed, where
                                   -list   => list projects that have changes to be merged
                                   -test   => do a dry-run merge on said projects
                                   -merge  => do a merge on said projects 
                                   -commit => do a merge on said projects and commit changes
  <project_home_dir>           : full path of the \$PROJECT_HOME you will merge into
  (trunk|<my_branch_name>)     : where you will merge from

For a sync merge:
  \% fgpMergeReport branch_project_home trunk

For a reintegration merge:
  \% fgpMergeReport trunk_project_home my_branch_name

";
  exit(1);
}
