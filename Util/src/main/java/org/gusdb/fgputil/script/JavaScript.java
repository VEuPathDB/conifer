package org.gusdb.fgputil.script;

import java.util.List;

import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptException;

import org.gusdb.fgputil.ListBuilder;
import org.gusdb.fgputil.script.Scripting.Language;

/**
 * Utility class that allows developers to write functions in JavaScript,
 * easily execute them, and cast results back to Java objects.
 * 
 * @author rdoherty
 */
public class JavaScript {

  /**
   * Pre-fab functions callable on this script engine
   */
  private static List<String> PREFAB_FUNCTIONS = new ListBuilder<String>()
    .add("function evalBool(expr) { return eval(expr); }")
    .add("function isValidJson(expr) { try { JSON.parse(expr); return true; } catch(err) { return false; } }")
    .add("function checkArray(arr) { if (Object.prototype.toString.call( arr ) !== '[object Array]') " +
    		"throw 'Variable ' + arr + ' is not an array.'; }")
    
    // The following functions are meant to be called within boolean expressions
    .add("function contains(arr, item) { checkArray(arr); return (arr.indexOf(item) != -1); }")
    .add("function containsAny(arr, items) { checkArray(arr); checkArray(items); " +
    		"for (var i=0; i<arr.length; i++) { if (arr.indexOf(items[i]) != -1) return true; } return false; }")
    .add("function containsAll(arr, items) { checkArray(arr); checkArray(items); " +
    		"for (var i=0; i<arr.length; i++) { if (arr.indexOf(items[i]) == -1) return false; } return true; }")
    .toList();
  
  /**
   * JavaScript engine that will execute our code
   */
  private ScriptEngine _engine;
  
  /**
   * Creates a JavaScript engine and registers required functions so public
   * methods can be called.
   */
  public JavaScript() {
    _engine = Scripting.getScriptEngine(Language.JAVASCRIPT);
    try {
      registerFunctions();
    }
    catch (ScriptException e) {
      throw new RuntimeException("Hard-coded function not parsable by script engine.", e);
    }
  }

  /**
   * Registers pre-compiled functions required to execute the methods below
   * 
   * @throws ScriptException if code is unable to be evaluated
   */
  private void registerFunctions() throws ScriptException {
    for (String func : PREFAB_FUNCTIONS) {
      _engine.eval(func);
    }
  }
  
  /**
   * Evaluates a given function by name, relaying the passed parameters, and
   * casting the result as the passed class.
   * 
   * @param functionName name of the function to call
   * @param returnType return type desired/expected
   * @param args arguments to pass to the javascript function
   * @return result of the executed function, cast as the type provided
   * @throws ScriptException if error occurs in execution of the script
   */
  @SuppressWarnings("unchecked")
  private <T> T callFunction(String functionName, Class<T> returnType, Object... args) throws ScriptException {
    try {
      return (T)((Invocable)_engine).invokeFunction(functionName, args);
    }
    catch (NoSuchMethodException e) {
      // this should never happen since function is defined above
      throw new RuntimeException("Function called that was not defined in script engine.", e);
    }
  }

  /**
   * Attempts to parse a JSON expression and returns whether it is valid.
   * 
   * @param expression json string
   * @return true if json is valid, else false
   * @throws ScriptException if internal error occurs
   */
  public boolean isValidJson(String expression) throws ScriptException {
    return callFunction("isValidJson", Boolean.class, expression);
  }

  /**
   * Parses a boolean expression and returns whether it is valid.  It does
   * NOT evaluate the expression; only tells whether it is a valid expression.
   * The boolean expression may or may not access the params via a "params" 
   * object generated by the method.
   * 
   * @param booleanExpr boolean expression which may or may not contain parameters
   * @return true if parsing is successful, else false
   */
  public boolean isValidBooleanExpression(String booleanExpr) {
    try {
      assertValidBooleanExpression(booleanExpr);
      return true;
    }
    catch (ScriptException e) {
      return false;
    }
  }
  
  /**
   * Parses a boolean expression and returns whether it is valid.  It does
   * NOT evaluate the expression; only tells whether it is a valid expression.
   * The boolean expression may or may not access the params via a "params" 
   * object generated by the method.  Since an exception is thrown if the
   * expression is invalid, the cause of the error can be read from the exception.
   * 
   * @param booleanExpr boolean expression which may or may not contain parameters
   * @throws ScriptException if expression could not be parsed
   */
  public void assertValidBooleanExpression(String booleanExpr) throws ScriptException {
    _engine.eval(getParameterizedBoolExprFunc(booleanExpr));
  }

  /**
   * Evaluates the passed boolean expression and returns result as boolean
   * 
   * @param expression boolean expression in javascript
   * @return true or false
   * @throws ScriptException if expression syntax is incorrect
   */
  public boolean evaluateBooleanExpression(String expression) throws ScriptException {
    return callFunction("evalBool", Boolean.class, expression);
  }
  
  /**
   * Evaluates a parameterized boolean expression, passing in the parameters
   * contained in the passed JSON string.  The boolean expression may or may
   * not access the params via a "params" object generated by the method.
   * 
   * @param booleanExpr a parameterized boolean expression
   * @param paramsJson a json object containing the params
   * @return true if expression evaluates to true, else false
   * @throws ScriptException if expression or json are not valid, or other
   * error occurs
   */
  public boolean evaluateBooleanExpression(String booleanExpr, String paramsJson) throws ScriptException {
    _engine.eval(getParameterizedBoolExprFunc(booleanExpr));
    return callFunction("evalBoolParams", Boolean.class, paramsJson);
  }
  
  private String getParameterizedBoolExprFunc(String booleanExpr) {
    return new StringBuilder()
      .append("function evalBoolParams(jsonObj) {")
      .append("  var params = JSON.parse(jsonObj);")
      .append("  return (").append(booleanExpr).append(");")
      .append("}").toString();
  }
  
}
